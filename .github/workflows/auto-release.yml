name: Auto Release

on:
  push:
    branches: [main, master]
    paths: ['package.json']

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check version change
      id: check
      run: |
        # 获取当前版本
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # 获取上一次提交的版本
        git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous version"
        PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # 恢复当前版本
        git checkout HEAD -- package.json
        
        # 检查版本是否变化
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "should-release=true" >> $GITHUB_OUTPUT
          
          # 检查标签是否已存在
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag v$CURRENT_VERSION already exists, skipping release"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Version unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create and push tag
      run: |
        VERSION="${{ needs.check-version.outputs.new-version }}"
        TAG_NAME="v$VERSION"
        
        # 配置 Git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 创建标签
        git tag "$TAG_NAME"
        git push origin "$TAG_NAME"
        
        echo "Created and pushed tag: $TAG_NAME"

  build-and-release:
    name: Build and Release
    needs: [check-version, create-tag]
    if: needs.check-version.outputs.should-release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: kkape-gearbox
          
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: kkape-gearbox.exe
          
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: kkape-gearbox
          
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: kkape-gearbox
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install pnpm
      run: npm install -g pnpm
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Generate icons
      run: pnpm generate:icons
    
    - name: Build frontend
      run: pnpm --filter shell build
    
    - name: Build Tauri app
      run: |
        cd apps/shell
        cargo tauri build --target ${{ matrix.target }}
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.check-version.outputs.new-version }}"
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md || echo "Release version $VERSION")
        else
          CHANGELOG="Release version $VERSION"
        fi
        echo "$CHANGELOG" > changelog.txt
    
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        name: KKAPE Gearbox v${{ needs.check-version.outputs.new-version }}
        body_path: changelog.txt
        draft: false
        prerelease: ${{ contains(needs.check-version.outputs.new-version, 'beta') || contains(needs.check-version.outputs.new-version, 'alpha') || contains(needs.check-version.outputs.new-version, 'rc') }}
        files: |
          apps/shell/src-tauri/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          apps/shell/src-tauri/target/${{ matrix.target }}/release/bundle/**/*
